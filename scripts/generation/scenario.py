import argparse
import json
import os
import random
import time
import uuid

from datasets import load_dataset
from langchain_google_genai import ChatGoogleGenerativeAI
from pydantic import BaseModel, Field
from tqdm import tqdm

from spalign.projects.happyrat.happyrat import CHARACTERS


class Scenario(BaseModel):
    reasoning: str = Field(
        description="与えられた多様な設定要素（場所、時間、関係性、状況など）をどのように解釈し、組み合わせ、あるいは取捨選択して一つの魅力的なシーンを構築したかの思考プロセス。矛盾する要素をどう創造的に解決したかについても記述する。"
    )
    scenario: str = Field(
        description="思考プロセスに基づいて作成された、具体的なシーンの情景描写やキャラクターの導入部分。会話そのものは含まず、あくまで会話が始まる直前までの舞台設定を記述する。"
    )


# --- 1. 要素リストの大幅拡充 ---

# ■ 場所 (日常 + 非日常)
locations = [
    # 日常
    "放課後の教室",
    "屋上",
    "図書館の静かな一角",
    "混雑したカフェ",
    "深夜のファミリーレストラン",
    "公園の噴水前",
    "駅のホーム",
    "帰宅途中の電車内",
    "カラオケボックス",
    "映画館",
    "オフィスの給湯室",
    # 自然・アウトドア
    "雨の降る森の中",
    "星空の見える丘の上",
    "キャンプ場の焚き火の前",
    "寂れた神社の境内",
    "ビーチサイドのバー",
    # 非日常・SF
    "宇宙船のブリッジ",
    "放棄された宇宙ステーション",
    "サイバーパンクな都市の路地裏",
    "仮想現実(VR)空間",
    "月面のコロニー",
    # ファンタジー
    "魔法学校の図書館",
    "エルフの住む森",
    "ドラゴンの巣穴の近く",
    "王宮の舞踏会",
    "異世界の酒場",
    # サスペンス・特殊
    "事件現場",
    "病院の待合室",
    "取り調べ室",
    "脱出ゲームの密室",
    "裁判所の法廷",
    "廃墟となった遊園地",
    # --- 日常・学園 ---
    "放課後の静まり返った教室",
    "学校の屋上、夕日に照らされて",
    "活気のある学食",
    "文化祭準備中の体育館",
    "学校の保健室のベッド",
    "図書館の古書の匂いがする一角",
    "部室",
    "卒業式後の誰もいない校庭",
    # --- 日常・街 ---
    "賑やかな交差点の真ん中",
    "深夜のコインランドリー",
    "レトロな喫茶店",
    "行列のできるラーメン屋",
    "休日のショッピングモール",
    "デパートの屋上遊園地",
    "雨宿りをしているバス停",
    "閉館間際の美術館",
    "工事の騒音が響く路地裏",
    "ペットショップの子犬のケージ前",
    "プラネタリウム",
    "ゲームセンターの対戦台",
    # --- 自然・アウトドア ---
    "星空が降り注ぐ無人の砂浜",
    "霧の深い森の中",
    "雪に閉ざされた山荘",
    "火山の火口付近",
    "滝の裏側にある洞窟",
    "オーロラが揺らめく極地の氷原",
    "台風が迫る港",
    "静かな湖に浮かぶボートの上",
    "樹齢千年の大樹の下",
    # --- SF・サイバーパンク ---
    "ワープ航行中の宇宙船のブリッジ",
    "放棄され静寂に包まれた宇宙ステーション",
    "サイバーパンク都市のネオン街",
    "アンドロイド専門の修理工場",
    "遺伝子研究所のクリーンルーム",
    "ダイソン球の内壁に作られた都市",
    "テラフォーミング中の惑星の観測基地",
    "反乱軍の隠れアジトである小惑星の内部",
    "仮想現実(VR)の会議室",
    # --- ファンタジー・歴史 ---
    "魔法使いの塔の最上階",
    "エルフが住む光の森",
    "ドワーフが築いた地下王国の鍛冶場",
    "ドラゴンの財宝が眠る巣穴",
    "悪魔を召喚するための儀式の祭壇",
    "世界樹の頂上",
    "浮遊大陸の辺境",
    "古代遺跡の謎の石室",
    "幕末の京都、新選組の屯所",
    "戦国時代の城の天守閣",
    "古代ローマのコロッセオの地下牢",
    "ヴィクトリア朝ロンドンの探偵事務所",
    # --- サスペンス・ホラー・特殊 ---
    "事件現場の立入禁止テープの内側",
    "閉鎖された精神病棟の独房",
    "地下の非合法な実験施設",
    "犯人しか知らない人質の監禁場所",
    "時限爆弾が仕掛けられた観覧車の中",
    "記憶の中の、何度も繰り返される風景",
    "夢と現実の狭間にある場所",
    "死者の魂が集うと言われる場所",
    "自分自身の心象風景の中",
]

# ■ 時間・タイミング
times = [
    "平日の昼休み",
    "夕暮れ時の帰り道",
    "嵐の夜",
    "記念日のディナー",
    "日の出直前の静寂の中",
    "祭りの喧騒の中",
    "真夜中、誰もいない時間",
    "大雪で孤立した日",
    "締め切り直前の深夜",
    # --- 日常的な時間 ---
    "平日のランチタイム",
    "週末の朝、のんびりと",
    "仕事や授業が終わった直後の開放感の中",
    "真夜中の午前2時",
    "締め切りに追われる深夜",
    "待ち合わせの5分前",
    "終電を逃した後の駅",
    # --- 特別なイベント・タイミング ---
    "百年に一度の流星群が極大になる夜",
    "皆既日食が始まり、世界が闇に包まれる瞬間",
    "新年を迎えるカウントダウンの最中",
    "自分の誕生日",
    "大切な人の命日",
    "祭りの最高潮の盛り上がりの中",
    # --- 極限・非日常のタイミング ---
    "世界の終わりまで残り1時間を切った時",
    "システムの暴走まで残り3分",
    "犯行予告時刻の直前",
    "停電して、全ての音が消えた瞬間",
    "通信が途絶し、完全に孤立した状態",
    "大災害が発生した直後",
    "裁判の判決が下される直前の静寂",
    "敵に見つかる寸前の息を潜める時間",
]

# ■ 状況 (ポジティブ + ネガティブ + 奇妙)
situations = [
    # ポジティブ・日常
    "共通の趣味について熱く語り合っている",
    "サプライズパーティーの準備をしている",
    "一緒に料理を作っている",
    "旅行の計画を立てている",
    "宝の地図を見つけて、宝探しに出かけようとしている",
    # ネガティブ・対立
    "重要なものを失くしてしまい、途方に暮れている",
    "誰かの裏切りが発覚した直後",
    "大きな失敗をしてしまい、責任のなすりつけ合いになっている",
    "意見が真っ向から対立し、口論になっている",
    "危険な陰謀に巻き込まれてしまった",
    "誰かに追われて隠れている",
    # 関係性の変化
    "久しぶりの再会で、昔話に花を咲かせている",
    "別れ話をしている",
    "誤解が解けて、仲直りしようとしている",
    "相手に自分の秘密を打ち明けようか悩んでいる",
    # 奇妙
    "目が覚めたらお互いの体が入れ替わっていた",
    "同じ一日を何度もループしていることに気づいた",
    "自分たち以外の時間が止まってしまった世界にいる",
    "動物園ワンダーズーの中のシナリオを作成してください。",
    "居酒屋でのシナリオを作成してください。",
    "SFシナリオを作成してください。",
    "会社でのシナリオを作成してください。",
    "海外旅行でのシナリオを作成してください。",
    "喧嘩しているシナリオを作成してください。",
    "感動する話を作成してください。",
    "悲しい話を作成してください。",
    "怖い話を作成してください。",
    "笑い話を作成してください。",
    "家族の話を作成してください。",
    "スラップスティクコメディを作成してください。",
    "駅での出会いのシナリオを作成してください。",
    "イベントでのシナリオを作成してください。",
    "恋人とのデートのシナリオを作成してください。",
    "ハロウィンパーティーでのシナリオを作成してください。",
    "クリスマスの夜のシナリオを作成してください。",
    "テレビ局がやってきたシナリオを作成してください。",
    "サーカス団がやってきたシナリオを作成してください。",
    "マフィアの世界のシナリオを作成してください。",
    "鬼ごっこをしているシナリオを作成してください。",
    "観覧車の中でのシナリオを作成してください。",
    "運動会でのシナリオを作成してください。",
    "電車の中でのシナリオを作成してください。",
    "海辺のキャンプのシナリオを作成してください。",
    "ゲームの中に入り込むシナリオを作成してください。",
    "荒廃した都市のシナリオを作成してください。",
    "海底でのシナリオを作成してください。",
    "森の奥で迷子になるシナリオを作成してください。",
    "船上でのシナリオを作成してください。",
    "魅惑のジャングルでのシナリオを作成してください。",
    "ダンスパーティーでのシナリオを作成してください。",
    "ミステリー小説のようなシナリオを作成してください。",
    "スポーツの試合でのシナリオを作成してください。",
    "宝探しの冒険シナリオを作成してください。",
    "島を脱出するシナリオを作成してください。",
    "病院でのシナリオを作成してください。",
    "動物大戦争のシナリオを作成してください。",
    "冬休みの思い出シナリオを作成してください。",
    "子供だけの冒険シナリオを作成してください。",
    "小さな町の謎解きシナリオを作成してください。",
    "魔法学校でのシナリオを作成してください。",
    "城での生活を描いたシナリオを作成してください。",
    "戦場でのシナリオを作成してください。",
    "サーカスでのシナリオを作成してください。",
    "不思議な図書館のシナリオを作成してください。",
    "モンスターと戦うシナリオを作成してください。",
    "おとぎ話風のシナリオを作成してください。",
    "舞台裏でのシナリオを作成してください。",
    "探偵のシナリオを作成してください。",
    "豪華客船でのシナリオを作成してください。",
    "嵐の夜のシナリオを作成してください。",
    "寮生活のシナリオを作成してください。",
    "修学旅行中のシナリオを作成してください。",
    "古代遺跡のシナリオを作成してください。",
    "山のふもとの村でのシナリオを作成してください。",
    "特殊能力を持つキャラクターのシナリオを作成してください。",
    "犯罪捜査のシナリオを作成してください。",
    "時間制限があるシナリオを作成してください。",
    "学校の試験前夜のシナリオを作成してください。",
    "幽霊の出る館のシナリオを作成してください。",
    "宇宙船の中でのシナリオを作成してください。",
    "ドラゴンとの共存する世界のシナリオを作成してください。",
    "動物たちの視点でのシナリオを作成してください。",
    "自然災害からの避難のシナリオを作成してください。",
    "高層ビルの中でのシナリオを作成してください。",
    "森の中の小屋でのシナリオを作成してください。",
    "無人島での生活のシナリオを作成してください。",
    "異星人との交流のシナリオを作成してください。",
    "天才少年の物語のシナリオを作成してください。",
    "伝説の武器を求めるシナリオを作成してください。",
    "不思議な祭壇のシナリオを作成してください。",
    "人間と動物が話せる世界のシナリオを作成してください。",
    "古代文明の復活シナリオを作成してください。",
    "仮想空間でのシナリオを作成してください。",
    "楽器にまつわるシナリオを作成してください。",
    "裏社会のシナリオを作成してください。",
    "冒険家たちの旅のシナリオを作成してください。",
    "魔法のアイテムを見つけるシナリオを作成してください。",
    "時代劇のようなシナリオを作成してください。",
    "海賊の冒険シナリオを作成してください。",
    "駅前商店街でのシナリオを作成してください。",
    "一夜限りのシナリオを作成してください。",
    "孤独なヒーローのシナリオを作成してください。",
    "崩壊する世界でのシナリオを作成してください。",
    "幻想的な雪国のシナリオを作成してください。",
    "ある日突然のシナリオを作成してください。",
    "村の伝説を元にしたシナリオを作成してください。",
    "学校の怪談を元にしたシナリオを作成してください。",
    "動物園の舞台裏のシナリオを作成してください。",
    "秘密の地下室でのシナリオを作成してください。",
    "学校の屋上でのシナリオを作成してください。",
    "屋台巡りのシナリオを作成してください。",
    "世界を救う鍵を巡るシナリオを作成してください。",
    "コンサートの舞台裏のシナリオを作成してください。",
    "神話のようなシナリオを作成してください。",
    "高校生の部活動のシナリオを作成してください。",
    "町中で大追跡のシナリオを作成してください。",
    "母と子の心温まるシナリオを作成してください。",
    "天界と地上の物語のシナリオを作成してください。",
    "街中で起こる怪奇現象のシナリオを作成してください。",
    "火山島でのサバイバルシナリオを作成してください。",
    "農村での生活のシナリオを作成してください。",
    "パズルを解くシナリオを作成してください。",
    "人狼ゲームをやっているシナリオを作成してください。",
    "テレビ出演をしているシナリオを作成してください。",
    "ラジオのMCをしているようなシナリオを作成してください。",
    "Youtubeに出演しているようなシナリオを作成してください。",
    "テレビのコメンテーターをしているようなシナリオを作成してください。",
    "ラジオで視聴者からのお便りに回答するようなシナリオを作成してください。",
    "テレビのバラエティー番組に出演しているのようなシナリオを作成してください。",
    "人間のお客さんが来て喜ぶシナリオを作成してください。",
    "動物園の舞台裏のシナリオを作成してください。",
    "トリビア披露会のシナリオを作成してください。",
    # --- 日常・コメディ ---
    "一緒に料理を作っているが、レシピを無視して大失敗している",
    "宝くじで高額当選し、その使い道を巡って揉めている",
    "ペットの猫がとんでもないイタズラをした後始末をしている",
    "お互いの恥ずかしい過去を暴露しあっている",
    "目が覚めたら、お互いの体が入れ替わっていたことに気づいた",
    # --- 恋愛 ---
    "気まずい三角関係の当事者全員が、偶然同じ場所で鉢合わせした",
    "感動的なプロポーズをしようとしている（された）直後",
    "思い出の場所で、別れた相手と偶然再会してしまった",
    "相手のスマホを見てしまい、浮気を疑っている",
    # --- アクション・サスペンス ---
    "時限爆弾を目の前に、どちらのコードを切るかで激しく議論している",
    "敵対組織に追われ、廃墟に身を隠している",
    "重要な証拠が入ったカバンを、敵と奪い合っている",
    "人質に取られ、犯人と命がけの交渉をしている",
    "信頼していた仲間の裏切りが発覚した瞬間",
    # --- ミステリー ---
    "不可解な密室殺人の現場で、第一発見者になってしまった",
    "互いのアリバイを探り合い、相手が犯人ではないかと疑っている",
    "殺害された被害者が残した、謎のダイイングメッセージを解読しようとしている",
    "重要な証言者を、暗殺者の手から守ろうとしている",
    # --- SF・ファンタジー ---
    "暴走したAIを停止させるため、その中枢部に侵入している",
    "予言された世界の終焉を阻止するため、禁断の儀式を行っている",
    "魔法の実験に失敗し、予期せぬクリーチャーを召喚してしまった",
    "宇宙船が未知の惑星に不時着し、サバイバルを強いられている",
    "自分たちがこの世界の登場人物（NPC）であることに気づいてしまった",
]

# ■ 会話のゴール (より複雑なものを含む)
goals = [
    # 関係構築
    "相手との距離を縮める",
    "相手の信頼を勝ち取る",
    "デートの約束を取り付ける",
    # 問題解決・交渉
    "この場から無事に脱出する方法を見つけ出す",
    "裏切り者の正体を突き止める",
    "相手に危険な計画を思いとどまらせる",
    "壊れた関係を修復するための第一歩を踏み出す",
    "共通の敵を倒すための作戦を練る",
    "難しい要求を相手に呑ませる",
    # 探求・理解
    "相手が隠している本当の気持ちや秘密を探り出す",
    "この奇妙な現象の原因を解明する",
    "ただ純粋に、楽しい時間を過ごす",
    # --- 関係性の変化 ---
    "壊れてしまった関係を修復するための、最初の言葉を探す",
    "相手に自分の本当の気持ち（好意、憎しみなど）を告白する",
    "長年の罪悪感を打ち明け、相手からの許しを得る",
    "この場限りの協力関係を結ぶための条件を交渉する",
    # --- 問題解決・行動 ---
    "この絶体絶命の状況から二人で生きて脱出する方法を見つけ出す",
    "チームの中にいる裏切り者の正体を特定する",
    "相手を説得し、危険な計画を思いとどまらせる",
    "敵の注意を引きつけている間に、もう一人が目的を達成する",
    "限られた資源（食料、水、薬）を、どう公平に分配するか決める",
    # --- 心理・探求 ---
    "相手がなぜ自分を裏切ったのか、その真意を問い詰める",
    "相手が隠している重大な秘密や過去を巧みに聞き出す",
    "この不可解な現象（ループ、タイムスリップなど）のルールや原因を解明する",
    "相手の価値観や信念を揺さぶり、自分の陣営に引き入れる",
    "目の前の出来事から目をそらし、ただ楽しいだけの無意味な会話を続ける",
]

# ■ 感情・雰囲気
emotions = [
    "和やかでリラックスしている",
    "喜びと希望に満ちている",
    "緊張感と猜疑心が渦巻いている",
    "切なく、ほろ苦い",
    "コミカルで笑いが絶えない",
    "絶望的で重苦しい",
    "罪悪感と後悔に苛まれている",
    "好奇心と冒険心に溢れている",
    "表面上は和やかだが、水面下では激しい心理戦が繰り広げられている",
    "ノスタルジックで、甘酸っぱくもどこか物悲しい",
    "狂気とユーモアが紙一重の、ブラックコメディのような",
    "絶望的な状況だが、不思議な連帯感が生まれている",
    "神聖で、畏敬の念すら抱かせるほどに荘厳な",
    "罪悪感と後悔が重くのしかかり、息苦しい",
    "全てを諦めたような、乾いた諦観が漂っている",
    "アドレナリンが駆け巡るような、高揚感と緊張感",
    "互いへの不信感と猜疑心が渦巻く、冷たい空気",
    "希望と再生への期待に満ちた、穏やかで温かい",
    # --- ポジティブ・明るい ---
    "心が弾むような、軽快でコミカルな",
    "希望と再生への期待に満ちた、穏やかで温かい",
    "冒険の始まりを予感させる、ワクワクするような高揚感に満ちた",
    "長年の努力が報われた瞬間の、カタルシスと達成感に溢れた",
    "気の置けない仲間と過ごす、リラックスした心地よい",
    "初々しく、甘酸っぱい青春の一ページのような",
    # --- ネガティブ・暗い ---
    "全てを諦めたような、乾いた諦観が漂う重苦しい",
    "じっとりとした湿り気を感じる、陰鬱でメランコリックな",
    "罪悪感と自己嫌悪が渦巻き、息が詰まるような",
    "大切なものを失った喪失感と、どうしようもない無力感に苛まれる",
    "出口のない閉塞感と、じわじわと募る焦りがある",
    "破滅へと向かっていることを自覚しながらも、止められない悲壮感に満ちた",
    # --- 緊張・対立 ---
    "表面上は和やかだが、水面下では激しい心理戦が繰り広げられている",
    "互いへの不信感と猜疑心が渦巻く、氷のように冷たい",
    "一触即発の、張り詰めた緊張感が支配する",
    "アドレナリンが駆け巡るような、危険な興奮と緊張感",
    "静かだが、確実な敵意と殺意が感じられる",
    # --- 複雑・アンビバレント（両義的） ---
    "ノスタルジックで、甘美な思い出と後悔が入り混じる、ほろ苦い",
    "恐怖と好奇心が同居する、禁断の扉を開けるような",
    "狂気と正気が紙一重の、ブラックユーモアに満ちた",
    "美しくもどこか不気味な、非現実的な（シュールな）",
    "悲しい出来事のはずなのに、なぜか笑いがこみ上げてくるような不謹慎な",
    "荘厳で神聖だが、同時に人間的な畏れを感じさせる",
    # --- 特定のジャンルの雰囲気 ---
    # (SF)
    "テクノロジーへの畏怖と、未知なるものへの探求心に満ちた、スペーシーな",
    "管理された社会の、無機質で冷たいディストピア的な",
    "ネオンと酸性雨に濡れる、退廃的でサイバーパンクな",
    # (ファンタジー)
    "魔法の奇跡を目の当たりにする、神秘的で幻想的な",
    "古の伝説や神話が息づく、壮大でエピックな",
    # (ホラー)
    "正体不明の何かに追われる、パニックと恐怖に支配された",
    "常識が通用しない、不条理で悪夢のような",
    "静寂の中で、じわりと精神を侵食してくるような心理的な恐怖（サイコホラー）",
    # (ミステリー)
    "知的好奇心をくすぐる、謎めいてミステリアスな",
    "全てのピースが繋がり、真相が明らかになる瞬間の衝撃と驚きがある",
]


# --- 2. 関係性の動的生成 ---
base_relationships = [
    "友人",
    "恋人",
    "家族（兄弟姉妹）",
    "ライバル",
    "同僚",
    "師弟関係",
    "上司と部下",
    "ただの顔見知り",
    "",  # シンプルな関係
    "だが、最近些細なことで大喧嘩し、互いに口も聞いていない",
    "で、10年ぶりに偶然再会したばかり",
    "であり、決して他人に知られてはいけない秘密を共有している",
    "だが、互いの家族同士が憎み合っている",
    "で、利害関係だけで繋がっているビジネスパートナー",
    "だったが、片方が記憶喪失になり、相手のことを覚えていない",
    "であり、片方がもう一方の命の恩人",
    "だが、一方が相手に歪んだ執着心を抱いている",
    "で、互いにライバルとして認め合っているが、内心では嫉妬している",
    "であり、これから生死を共にするミッションに挑むところだ",
    "だったが、ある事件をきっかけに袂を分かった（元親友、元恋人など）",
    "だが、実は片方が相手を監視するよう命じられているスパイ",
    "で、師弟関係にあるが、弟子が師匠の能力を超え始めている",
    "だが、お互いの過去に犯した罪を許せずにいる",
]
relationship_modifiers = [
    "",  # 修飾なしのシンプルな関係
    "だが、最近些細なことで喧嘩して気まずい",
    "で、久しぶりに再会したばかり",
    "であり、共通の大きな秘密を抱えている",
    "だが、価値観の違いからしばしば対立する",
    "で、お互いに淡い恋心を抱いている",
    "だが、一方がもう一方に精神的に依存している",
    "であり、これから一緒に大きなプロジェクトに挑む",
    "だったが、今は袂を分かっている（元恋人、元親友など）",
]

# ■ 出力形式のスタイル (output_formats)
# シナリオ全体の「文体」や「構造」を指定する
output_formats = [
    # --- 基本的な形式 ---
    "三人称視点の小説形式で",
    "映画の脚本の冒頭（シーンヘッダーとト書き）のように",
    "登場人物の一人の内面を語る、一人称視点のモノローグ形式で",
    "まるでドキュメンタリー番組のナレーションのように、客観的な事実を淡々と描写するスタイルで",
    "詩的で、比喩や象徴を多用した文学的な散文形式で",
    "箇条書きを用いて、重要な要素（場所、時間、人物の配置、キーアイテムなど）を構造的に記述する形式で",
    "箇条書きを用いて、重要な要素（場所、時間、人物の配置、キーアイテムなど）を構造的に記述する形式で",
    "Markdown形式で",
    "Markdown形式で",
    "【】（場所などのセクション）とその要素の箇条書き（・から始まる）を用いた構造化された形式で",
    "【】（場所などのセクション）とその要素の箇条書き（・から始まる）を用いた構造化された形式で",
    "【】（時間などのサブセクション）とその要素の箇条書き（- から始まる）を用いた構造化された形式で",
    "【】（時間などのサブセクション）とその要素の箇条書き（- から始まる）を用いた構造化された形式で",
    "[]（キャラクターの配置などのサブセクション）とその要素の箇条書き（- から始まる）を用いた構造化された形式で",
    "[]（キャラクターの配置などのサブセクション）とその要素の箇条書き（- から始まる）を用いた構造化された形式で",
    "[]（場所や心情などのサブセクション）とその要素の箇条書き（・ から始まる）を用いた構造化された形式で",
    "[]（場所や心情などのサブセクション）とその要素の箇条書き（・ から始まる）を用いた構造化された形式で",
    "<>（展開などのサブセクション）とその要素の箇条書き（- から始まる）を用いた構造化された形式で",
    "<>（展開などのサブセクション）とその要素の箇条書き（- から始まる）を用いた構造化された形式で",
    "<>（キャラクターの配置などのサブセクション）とその要素の箇条書き（・ から始まる）を用いた構造化された形式で",
    "<>（キャラクターの配置などのサブセクション）とその要素の箇条書き（・ から始まる）を用いた構造化された形式で",
    "構造化された形式で",
    "構造化された形式で",
    # --- 特定のメディアを模倣する形式 ---
    # "舞台演劇の戯曲のト書きのように",
    # "テーブルトークRPG(TRPG)のシナリオブックの導入部のように、ゲームマスター(GM)向けの説明として",
    # "古いフィルム・ノワール映画の冒頭ナレーションのような、ハードボイルドな文体で",
    # "ライトノベルのプロローグのように、読者の興味を引くキャッチーな書き出しで",
    # "まるで一枚の絵画を言葉で説明する（エクフラシス）かのように、視覚的な情報に特化して",
]

# ■ 追加指示・焦点 (instructions)
# シナリオ執筆において、特に「何に焦点を当てるか」を指定する
instructions = [
    # --- 描写の焦点 ---
    "キャラクターたちの行動指針（ト書き）を重点的に記述してください。",
    "情景描写、特に光と影の使い方を詩的に、かつ詳細に記述してください。",
    "キャラクターたちの出会いの瞬間、または会話が始まる直前の微細な心理描写に焦点を当ててください。",
    "登場人物たちの服装や持ち物、部屋にある小物など、ディテール描写を緻密に行ってください。",
    "その場の「音」（環境音、衣擦れの音、微かな話し声など）についての描写を豊かに含めてください。",
    "その場の「匂い」や「空気の質感」など、嗅覚や触覚に訴える描写を重視してください。",
    # --- 構成・演出の焦点 ---
    "このシーンで起こりうる、最もドラマチックな一点（キーとなる出来事や発見）を強調して記述してください。",
    "まるでカメラが動くように、広い風景からキャラクターの表情へとズームインしていくような描写を試みてください。",
    "登場人物たちの過去を暗示するような、象徴的なアイテムや風景（フラッシュバックのきっかけ）を配置してください。",
    "敢えて情報を制限し、読者に謎や疑問を抱かせるような、ミステリアスな導入を心がけてください。",
    "キャラクターの内面の声（心のつぶやき）と、外面の行動とのギャップを対比的に描写してください。",
]


# --- 3. プロンプト生成関数のブラッシュアップ ---


def create_scenario_prompt(characters, user):
    """
    拡充された要素と深掘りされた関係性を使い、LLMへの指示を強化したプロンプトを生成する。
    """
    character_names = "と".join([c["name"] for c in characters])
    user_name = user["name"]

    # プロフィール情報を要約してプロンプトに含める
    character_profiles = "\n".join(
        [f"### {c['name']}\n{c['profile']}" for c in characters]
    )
    user_profile = f"### {user['name']}\n{user['profile']}"

    # シーン要素をランダムに選択
    selected_location = random.choice(locations)
    selected_time = random.choice(times)
    selected_situation = random.choice(situations)
    selected_goal = random.choice(goals)
    selected_emotion = random.choice(emotions)

    # ★関係性を動的に生成
    base_rel = random.choice(base_relationships)
    modifier = random.choice(relationship_modifiers)
    selected_relationship = f"{base_rel}{modifier}" if modifier else base_rel

    # 出力形式の選択
    selected_output_format = random.choice(output_formats)
    selected_instruction = random.choice(instructions)

    # ★LLMへの指示を強化したプロンプトテンプレート
    prompt = f"""
あなたは創造的なシナリオプランナー兼、才能ある脚本家です。
あなたの仕事は、以下のランダムに与えられた多様な要素を組み合わせて、一つのユニークで魅力的な「会話が始まる直前のシーン」を構築することです。

### Step 1: シナリオプランナーとしての思考

まず、以下の【入力要素】を分析してください。
いくつかの要素は互いに矛盾しているかもしれません。その矛盾こそが、ユニークな物語を生むチャンスです。
どの要素を主軸にし、どの要素を補助的に使い、あるいはどの要素を創造的に解釈し直すか、あなたの思考プロセスを整理してください。

{character_profiles}
{user_profile}

- **シーン設定:**
  - **場所:** {selected_location}
  - **時間:** {selected_time}
  - **関係性:** {character_names}と{user_name}は「{selected_relationship}」という関係です。
  - **状況:** 彼らは今、「{selected_situation}」という状況に置かれています。
  - **全体の雰囲気:** シーン全体は「{selected_emotion}」という雰囲気です。
  - **隠れた会話のゴール:** 彼らは「{selected_goal}」を達成しようとしています。

### Step 2: 脚本家としての執筆

次に、Step 1で練り上げたプランに基づき、具体的な「シーンの導入部」を執筆してください。
会話そのものは含めず、登場人物たちがその場にどのように存在し、何を感じ、どのような空気が流れているかを鮮やかに描写してください。

### Step 3: 最終的な出力

最後に、以下のPydanticモデルの形式に従って、あなたの思考プロセスと完成したシナリオを出力してください。

- **`reasoning`:** Step 1のあなたの思考プロセスを記述します。なぜそのように要素を組み合わせたのか、矛盾をどう解決したのかを具体的に説明してください。
- **`scenario`:** Step 2で執筆したシーンの導入部を記述します。会話は絶対に含めないでください。
- **出力形式に関する追加指示:**
  - シナリオ全体のスタイルは「{selected_output_format}」で記述してください。
  - 特に「{selected_instruction}」を意識して執筆してください。
"""
    return prompt


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-n", "--num_scenarios", type=int, default=100)
    parser.add_argument("-b", "--batch_size", type=int, default=10)
    parser.add_argument("-o", "--output_dir", type=str, default="scenarios")
    args = parser.parse_args()

    model = ChatGoogleGenerativeAI(
        model="gemini-2.5-pro",
        temperature=0.7,
        max_tokens=8192,
        api_key=os.getenv("GEMINI_API_KEY"),
    ).with_structured_output(Scenario)

    USERS = load_dataset(
        "Spiral-AI/Synthesized-Persona-20250103", split="train"
    ).to_list()

    # パラメータ設定

    # 出力ディレクトリの作成
    os.makedirs(args.output_dir, exist_ok=True)

    # tqdmを使って進捗バーを表示
    pbar = tqdm(total=args.num_scenarios, desc="シナリオ生成中")

    # 全体の件数をバッチサイズで区切ってループ
    for i in range(0, args.num_scenarios, args.batch_size):
        batch_prompts = []
        batch_metadata = []  # 各プロンプトのメタデータを保存するリスト

        # 1バッチ（10件）分のプロンプトを生成
        for j in range(args.batch_size):
            num_charas = random.randint(1, 2)
            num_users = 1

            charas = random.sample(list(CHARACTERS.keys()), num_charas)
            users = random.sample(USERS, num_users)

            charas_info = [
                {"name": c, "profile": CHARACTERS[c]["profile"]} for c in charas
            ]
            users_info = {
                "name": users[0]["new_persona_name"],
                "profile": users[0]["new_persona"],
            }

            scenario_prompt = create_scenario_prompt(charas_info, users_info)

            batch_prompts.append(scenario_prompt)
            batch_metadata.append(
                {
                    "characters": charas_info,
                    "users": [users_info],
                    "character_list": charas,
                }
            )

        try:
            # 10件のプロンプトをリストとして渡し、バッチ処理を実行
            results: list[Scenario] = model.batch(batch_prompts)

            # 結果を個別のファイルに保存
            for k, scenario_result in enumerate(results):
                output_path = os.path.join(
                    args.output_dir, f"scenario_{uuid.uuid4()}.json"
                )

                with open(output_path, "w", encoding="utf-8") as f:
                    data = scenario_result.model_dump()
                    reasoning = data.pop("reasoning")
                    # 対応するメタデータを取得
                    metadata = batch_metadata[k]
                    metadata["reasoning"] = reasoning
                    data["metadata"] = metadata

                    json.dump(data, f, ensure_ascii=False, indent=2)

        except Exception as e:
            print(
                f"バッチ処理中にエラーが発生しました（{i}から{i + args.batch_size - 1}番目）: {e}"
            )
            print("5秒待機して次のバッチに進みます...")
            time.sleep(5)
            # エラーが発生したバッチの分も進捗バーを進める
            pbar.update(args.batch_size)
            continue  # エラーが起きても処理を続ける

            # 進捗バーを更新
        pbar.update(args.batch_size)

    pbar.close()
    print(
        f"{args.num_scenarios}件のシナリオ生成が完了しました。出力先: '{args.output_dir}'"
    )


if __name__ == "__main__":
    main()
